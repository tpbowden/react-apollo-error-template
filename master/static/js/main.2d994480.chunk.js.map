{"version":3,"sources":["graphql/schema.js","graphql/link.js","App.js","index.js"],"names":["PersonType","GraphQLObjectType","name","fields","id","type","GraphQLID","GraphQLString","QueryType","people","GraphQLList","resolve","Error","schema","GraphQLSchema","query","link","ApolloLink","operation","Observable","observer","ms","operationName","variables","Promise","setTimeout","then","graphql","print","result","next","complete","catch","error","bind","ALL_PEOPLE","gql","_templateObject","Trigger","update","this","props","window","react_default","a","createElement","React","Component","App","state","triggerUpdate","_this","setState","_ref","_this2","react_apollo_esm","_ref2","loading","data","Fragment","JSON","stringify","App_Trigger","client","ApolloClient","cache","InMemoryCache","render","src_App","document","getElementById"],"mappings":"oQAQMA,EAAa,IAAIC,IAAkB,CACvCC,KAAM,SACNC,OAAQ,CACNC,GAAI,CAAEC,KAAMC,KACZJ,KAAM,CAAEG,KAAME,QAUZC,EAAY,IAAIP,IAAkB,CACtCC,KAAM,QACNC,OAAQ,CACNM,OAAQ,CACNJ,KAAM,IAAIK,IAAYV,GACtBW,QAAS,WACP,MAAM,IAAIC,MAAM,eAMXC,EAAS,IAAIC,IAAc,CAAEC,MAAOP,IC9BpCQ,EAAO,IAAIC,IAAW,SAAAC,GACjC,OAAO,IAAIC,IAAW,SAAAC,GAAY,IAcrBC,EAbHN,EAAoCG,EAApCH,MAAOO,EAA6BJ,EAA7BI,cAAeC,EAAcL,EAAdK,WAanBF,EAZL,IAaD,IAAIG,QAAQ,SAAAb,GACjBc,WAAW,WACTd,KACCU,MAfAK,KAAK,kBACJC,YAAQd,EAAQe,YAAMb,GAAQ,KAAM,KAAMQ,EAAWD,KAEtDI,KAAK,SAAAG,GACJT,EAASU,KAAKD,GACdT,EAASW,aAEVC,MAAMZ,EAASa,MAAMC,KAAKd,gNCXjC,IAAMe,QAAaC,GAAHC,KASVC,8LACgB,IACVC,EAAWC,KAAKC,MAAhBF,OACRG,OAAOjB,WAAWc,EAAQ,sCAI1B,OAAOI,EAAAC,EAAAC,cAAA,kBAPWC,IAAMC,WAwDbC,6MA5CbC,MAAQ,CACNL,GAAG,KAGLM,cAAgB,WACdC,EAAKC,SAAS,SAAAC,GAAA,MAAY,CAAET,GAAdS,EAAGT,8EAGV,IAAAU,EAAAd,KACP,OACEG,EAAAC,EAAAC,cAAA,YACEF,EAAAC,EAAAC,cAAA,0CACAF,EAAAC,EAAAC,cAAA,sKAKAF,EAAAC,EAAAC,cAAA,0DACiD,IAC/CF,EAAAC,EAAAC,cAAA,4BAFF,KAIAF,EAAAC,EAAAC,cAAA,qCAC2BF,EAAAC,EAAAC,cAAA,oCAD3B,2EAIAF,EAAAC,EAAAC,cAACU,EAAA,EAAD,CAAOxC,MAAOoB,GACX,SAAAqB,GAAA,IAAGC,EAAHD,EAAGC,QAASC,EAAZF,EAAYE,KAAMzB,EAAlBuB,EAAkBvB,MAAlB,OACCU,EAAAC,EAAAC,cAAAF,EAAAC,EAAAe,SAAA,KACEhB,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAAA,WAAMe,KAAKC,UAAUJ,IACrBd,EAAAC,EAAAC,cAAA,oBACAF,EAAAC,EAAAC,cAAA,WAAMe,KAAKC,UAAUH,IACrBf,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,oBACAF,EAAAC,EAAAC,cAAA,WAAMe,KAAKC,UAAU5B,IACrBU,EAAAC,EAAAC,cAACiB,EAAD,CAASvB,OAAQe,EAAKJ,2BApClBJ,IAAMC,WCblBgB,SAAS,IAAIC,IAAa,CAC9BC,MAAO,IAAIC,IACXlD,UAGFmD,iBACExB,EAAAC,EAAAC,cAACU,EAAA,EAAD,CAAgBQ,OAAQA,GACtBpB,EAAAC,EAAAC,cAACuB,EAAD,OAEFC,SAASC,eAAe","file":"static/js/main.2d994480.chunk.js","sourcesContent":["import {\n  GraphQLSchema,\n  GraphQLObjectType,\n  GraphQLID,\n  GraphQLString,\n  GraphQLList\n} from \"graphql\";\n\nconst PersonType = new GraphQLObjectType({\n  name: \"Person\",\n  fields: {\n    id: { type: GraphQLID },\n    name: { type: GraphQLString }\n  }\n});\n\nconst peopleData = [\n  { id: 1, name: \"John Smith\" },\n  { id: 2, name: \"Sara Smith\" },\n  { id: 3, name: \"Budd Deey\" }\n];\n\nconst QueryType = new GraphQLObjectType({\n  name: \"Query\",\n  fields: {\n    people: {\n      type: new GraphQLList(PersonType),\n      resolve: () => {\n        throw new Error(\"failed\");\n      }\n    }\n  }\n});\n\nexport const schema = new GraphQLSchema({ query: QueryType });\n","import { graphql, print } from \"graphql\";\nimport { ApolloLink, Observable } from \"apollo-link\";\nimport { schema } from \"./schema\";\n\nexport const link = new ApolloLink(operation => {\n  return new Observable(observer => {\n    const { query, operationName, variables } = operation;\n    delay(300)\n      .then(() =>\n        graphql(schema, print(query), null, null, variables, operationName)\n      )\n      .then(result => {\n        observer.next(result);\n        observer.complete();\n      })\n      .catch(observer.error.bind(observer));\n  });\n});\n\nfunction delay(ms) {\n  return new Promise(resolve => {\n    setTimeout(() => {\n      resolve();\n    }, ms);\n  });\n}\n","import React from \"react\";\nimport { Query } from \"react-apollo\";\nimport gql from \"graphql-tag\";\n\nconst ALL_PEOPLE = gql`\n  query AllPeople {\n    people {\n      id\n      name\n    }\n  }\n`;\n\nclass Trigger extends React.Component {\n  componentDidMount() {\n    const { update } = this.props;\n    window.setTimeout(update, 5000);\n  }\n\n  render() {\n    return <h1 />;\n  }\n}\n\nclass App extends React.Component {\n  state = {\n    a: false\n  };\n\n  triggerUpdate = () => {\n    this.setState(({ a }) => ({ a: !a }));\n  };\n\n  render() {\n    return (\n      <main>\n        <h1>Apollo Client Error Template</h1>\n        <p>\n          This is a template that you can use to demonstrate an error in Apollo\n          Client. Edit the source code and watch your browser window reload with\n          the changes.\n        </p>\n        <p>\n          The code which renders this component lives in{\" \"}\n          <code>./src/App.js</code>.\n        </p>\n        <p>\n          The GraphQL schema is in <code>./src/graphql/schema</code>. Currently\n          the schema just serves a list of people with names and ids.\n        </p>\n        <Query query={ALL_PEOPLE}>\n          {({ loading, data, error }) => (\n            <>\n              <h3>Loading: </h3>\n              <pre>{JSON.stringify(loading)}</pre>\n              <h3>Data: </h3>\n              <pre>{JSON.stringify(data)}</pre>\n              <br />\n              <h3>Error:</h3>\n              <pre>{JSON.stringify(error)}</pre>\n              <Trigger update={this.triggerUpdate} />\n            </>\n          )}\n        </Query>\n      </main>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport { render } from \"react-dom\";\nimport { ApolloClient } from \"apollo-client\";\nimport { ApolloProvider } from \"react-apollo\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\n\nimport { link } from \"./graphql/link\";\nimport App from \"./App\";\n\nimport \"./index.css\";\n\nconst client = new ApolloClient({\n  cache: new InMemoryCache(),\n  link,\n});\n\nrender(\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}